// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "github.com/NewStreetTechnologies/go-backend-boilerplate/models"
)

// TranslationRepository is an autogenerated mock type for the TranslationRepository type
type TranslationRepository struct {
	mock.Mock
}

// CreateTranslations provides a mock function with given fields: req, code, key, translations
func (_m *TranslationRepository) CreateTranslations(req http.Request, code string, key string, translations string) error {
	ret := _m.Called(req, code, key, translations)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Request, string, string, string) error); ok {
		r0 = rf(req, code, key, translations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTranslations provides a mock function with given fields: req
func (_m *TranslationRepository) GetAllTranslations(req http.Request) ([]*models.Translation, error) {
	ret := _m.Called(req)

	var r0 []*models.Translation
	if rf, ok := ret.Get(0).(func(http.Request) []*models.Translation); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultLanguageTranslations provides a mock function with given fields: req
func (_m *TranslationRepository) GetDefaultLanguageTranslations(req http.Request) ([]*models.Translation, error) {
	ret := _m.Called(req)

	var r0 []*models.Translation
	if rf, ok := ret.Get(0).(func(http.Request) []*models.Translation); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(http.Request) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslationsByKey provides a mock function with given fields: ctx, key, code
func (_m *TranslationRepository) GetTranslationsByKey(ctx context.Context, key []string, code string) ([]*models.Translation, error) {
	ret := _m.Called(ctx, key, code)

	var r0 []*models.Translation
	if rf, ok := ret.Get(0).(func(context.Context, []string, string) []*models.Translation); ok {
		r0 = rf(ctx, key, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, string) error); ok {
		r1 = rf(ctx, key, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTranslationsByLanguage provides a mock function with given fields: req, code
func (_m *TranslationRepository) GetTranslationsByLanguage(req http.Request, code string) ([]*models.Translation, error) {
	ret := _m.Called(req, code)

	var r0 []*models.Translation
	if rf, ok := ret.Get(0).(func(http.Request, string) []*models.Translation); ok {
		r0 = rf(req, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Translation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(http.Request, string) error); ok {
		r1 = rf(req, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTranslations provides a mock function with given fields: req, code, key, translations
func (_m *TranslationRepository) UpdateTranslations(req http.Request, code string, key string, translations string) error {
	ret := _m.Called(req, code, key, translations)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.Request, string, string, string) error); ok {
		r0 = rf(req, code, key, translations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTranslationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTranslationRepository creates a new instance of TranslationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTranslationRepository(t mockConstructorTestingTNewTranslationRepository) *TranslationRepository {
	mock := &TranslationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
